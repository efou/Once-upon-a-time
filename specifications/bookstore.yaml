swagger: "2.0"
info:
    version: "0.0.1"
    title: Once upon a time
    description: A web page where all the writers upon the world can upload their own work and a large library where you can wander through and see every user's original books, their reviews, and their ratings.


schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
 
              
definitions:

  newUser:
    type: object
    properties:
      email:
        type: string
  user:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
  password:
    type: object
    properties:
      new password:
        type: string
        format: password
  username:
    type: object
    properties:
      username:
        type: string
  data:
    type: object
    required:
      - username
      - name
      - birthday
      - biography
    properties:
      username:
        type: string
      name:
        type: string
      birthday:
        type: string
        format: date
      biography:
       type: string
  subscribe:
    type: object
    properties:
      donwloads:
        $ref: '#/definitions/downloads'
      uploads:
        $ref: '#/definitions/uploads'
      list:
         $ref: '#/definitions/list'
      critics:
        $ref: '#/definitions/critic'
      ratings:
        $ref: '#/definitions/rating'

  downloads:
    type: object
    required:
      - book
      - user
      - number_of_books
    properties:
      book:
        $ref: '#/definitions/book'
      userId:
        type: integer
        format: int64
      number_of_books:
        type: integer
        format: int64
  uploads:
    type: object
    required:
      - book
      - userId
      - number_of_books
    properties:
      book:
        $ref: '#/definitions/book'
      userId:
        type: integer
        format: int64
      number_of_books:
        type: integer
        format: int64
  list:
    type: object
    required:
      - book
      - userId
      - number_of_books
    properties:
      book:
        $ref: '#/definitions/book'
      userId:
        type: integer
        format: int64
      number_of_books:
        type: integer
        format: int64
  
  messages:
    type: object
    properties:
      id:
        type: integer
        format: int64
      recipient:
        $ref: '#/definitions/user'
      recipient_id:
        type: integer
      recipient_username:
        type: string
      sender:
        $ref: '#/definitions/user'
      sender_id:
        type: integer
        format: int64
      sender_username:
        type: string
      text:
        type: string
  
  newBook:
    type: object
    required:
      - title
      - price
      - summary
    properties:
      title:
        type: string
      price:
        type: number
        format: float
      summary:
        type: string
  book:
    type: object
    required:
      - id
      - title
      - author
      - price
      - summary
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      author:
       type: string
      price:
        type: number
        format: float
      summary:
        type: string
  summary:
    type: object
    required:
      - book
      - user
      - text
    properties:
      book:
        $ref: '#/definitions/book'
      user:
        $ref: '#/definitions/user'
      text:
        type: string
  upload:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user:
        $ref: '#/definitions/user'
      book:
        $ref: '#/definitions/book'
      price:
        type: number
        format: float
      summary: 
        $ref: '#/definitions/summary'
  order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user:
        $ref: '#/definitions/user'
      book:
        $ref: '#/definitions/book'
      price:
        type: number
        format: float
  payment:
    type: object
    properties:
      order:
        $ref: '#/definitions/order'
      book:
        $ref: '#/definitions/book'
      amount:
        type: number
        format: float
  critic:
    type: object
    required:
      - book
      - user
      - text
    properties:
      book:
        $ref: '#/definitions/book'
      user:
        $ref: '#/definitions/user'
      text:
        type: string
  rating:
    type: object
    required:
      - book
      - user
      - rating
    properties:
      book:
        $ref: '#/definitions/book'
      user:
        $ref: '#/definitions/user'
      rating:
        type: number
        format: float
  

paths:
  
  /users/login:
    get:
      tags:
        - Users
      summary: Log in to the system
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: true
          type: string
        - in: query
          name: password
          description: The password for login 
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
        400:
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - Users
      summary: Logs out current logged in user session
      responses:
        default:
          description: successful operation
  /users/searchUser:
    get:
      tags:
        - Users
      summary: Get user by user name
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        404:
          description: User not found
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/user"
        400:
          description: Invalid username supplied
    delete:
      tags:
        - Users
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
          
  /users:
    post:
      description: Create a new account
      parameters:
        - name: email
          in: body
          required: true
          description: email of user or facebook account or google plus account
          type: string
      tags:
        - Users     
      responses:
        201:
          description: Account succesfully created
          schema:
            $ref: '#/definitions/newUser'
        403:
          description: Account has not created
  /users/password:
    put:
      description: Change password
      parameters:
        - name: password
          in: query
          description: previous password
          required: true
          type: string
          format: password
        - name: new password
          in: query
          description: new password
          required: true
          type: string
          format: password
      tags:
        - Settings
      responses:
        200:
          description: Password succesfully changed
          schema:
            type: array
            items:
              $ref: '#/definitions/password'
        404:
          description: Password has not changed
        400:
          description: Invalid word supplied
  /users/username:
    post:
      description: create username
      parameters:
        - name: username
          in: body
          description: create username
          required: false
          type: string
      tags:
        - Settings
      responses:
        201:
          description: Username succesfully created
          schema:
            type: array
            items:
              $ref: '#/definitions/username'
        404:
          description: Username has not created
  /users/update:
    put:
      description: Edit data like username, name, birthday and biography.
      parameters:
        - name: username
          description: new username
          required: false
          type: string
          in: query
        - name: name
          description: new name
          required: false
          type: string
          in: query
        - name: birthday
          description: change date
          required: false
          in: query
          type: string
          format: date
        - name: biography
          description: change biography
          required: false
          type: string
          in: query
      tags:
        - Settings
      responses:
        200:
          description: Data succesfully changed
          schema:
            $ref: '#/definitions/data'
        404:
          description: Data has not changed
  /users/language:
    put:
      summary: change language
      description:  pick English, French, German or Spanish as default language
      parameters:
        - name: language
          in: query
          description: select English, French, German or Spanish
          required: false
          type: string
      tags:
        - Settings
      responses:
        200:
          description: Language succesfully changed
        404:
          description: Language has not changed
  /users/photo:
    post:
      description: Add a new photo
      parameters:
        - name: userId
          in: query
          description: user's id 
          type: integer
          format: int64
          required: true
        - name: image
          in: query
          description: a picture to be uploaded on user's profile
          type: file
          required: true
      tags:
        - Settings   
      responses:
        201:
          description: Photo succesfully uploaded
        404:
          description: Photo has not uploaded
  /users/subscribe:
    post:
      description: allows users to follow user sepcified by ID
      parameters:
        - name: username
          in: query
          description: screen name of user for whom to subscribe
          type: string
        - name: user_id
          in: query
          description: ID of user for whom to subscribe
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
    
    get:
      summary: subscribe
      description: Get the information of uploads, downloads, rates, critics and "want to read" list of a user 
      parameters:
        - name: username
          in: path
          required: true
          description: username of user for whom to return results for
          type: string
        - name: userId
          in: path
          description: The id of the user for whom to return results for
          required: true
          type: integer
          format: int64
      tags:
        - Users
      responses:
        200:
          description: successful operation
          schema:  
            $ref: '#/definitions/subscribe'
            
  /users/subscribe/stop:
    post:
      description: allows user to unsubscribe user specified by ID
      parameters:
        - name: username
          in: query
          description: screen name of user for whom to subscribe
          type: string
        - name: user_id
          in: query
          description: ID of user for whom to subscribe
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
  /users/message:
    post:
      description: sends a new direct message to specified user 
      parameters:
        - name: username
          in: query
          required: true
          description: username of user to be sent message
          type: string
        - name: userId
          in: query
          description: The id of the user to be sent message
          required: true
          type: string
        - name: text
          in: query
          required: true
          description: text of the message
          type: string
      tags:
        - Users
      responses:
        201:
          description: Message succesfully sent
          schema:
            $ref: '#/definitions/messages'
        404:
          description: Message has not sent
 
    get:
      description: return most recent messages sent
      parameters:
        - name: since_id
          in: query
          required: false
          type: string
        - name: max_id
          in: query
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/messages'
  /books/homepage:
    get:
      description: Returns a list of the most recent books
      parameters:
        - name: since_id
          in: query
          description: Returns result with an ID greater than the specified ID
          required: false
          type: string
        - name: max_id
          in: query
          description: Returns results with an ID less than or equal to the specified ID
          required: false
          type: string
      tags:
        - Books
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/book' 
  /books:
    get:
      summary: Search
      description: The search returns a list with books whose title contains the keyword. 
      parameters:
        - name: keyword
          in: path
          description: a word from the title of the book 
          required: true
          type: string
      tags:
        - Books
      responses:
        200:
          description: Search succesfully done
          schema:
            type: array
            items:
              $ref: '#/definitions/book'
        404:
          description: Title not found
  /books/filter: 
    get:
      description: The filter returns a list with books filtered by category. language and rating.
      parameters:
        - name: category
          in: query
          description: select a category for your book
          required: false
          type: string
        - name: languge
          in: query
          description: select english, french, ferman or spanish books.
          required: false
          type: string
        - name: rating
          in: query
          description: select a book by other users rating.
          required: false
          type: string
      tags:
        - Books
      responses:
        200:
          description: Search succesfully done
          schema:
            type: array
            items:
              $ref: '#/definitions/book'
        404:
          description: Book with these criteria not found
  /books/upload:
    post:
      summary: Upload a new book to the store
      description: Each user can upload a book with a unique title
      parameters:
        - in: body
          name: body
          description: Book object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/newBook"
      tags:
        - Books
      responses:
        201:
          description: Book has been uploaded
          schema:
            type: array
            items:
              $ref: '#/definitions/newBook'
        405:
          description: Book has not uploaded
    delete:
      summary: Delete a Book
      description: A user can delete a book that he has uploaded
      parameters:
        - name: title
          description: The title of the book to delete
          in: path
          required: true
          type: string
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          type: integer
          format: int64
      tags:
        - Books
      responses:
        201:
          description: Book has been deleted
          schema:
            type: array
            items:
              $ref: '#/definitions/book'
        404:
          description: book not found
  /books/summary:
    get:
      description: Returns a summary of a book 
      parameters:
        - name: title
          description: The title of the book
          in: query
          required: false
          type: string
        - name: bookId
          description: Book id to read summary
          in: query
          required: false
          type: integer
          format: int64    
      tags:
        - Books
      responses:
        201:
          description: Summary has been shown up
          schema:
            $ref: '#/definitions/summary'
        404:
          description: book not found
  /books/order: 
    post:
      description: Place an order of a book
      parameters:
        - name: bookId
          description: Book id to read summary
          in: query
          required: true
          type: integer
          format: int64
      tags:
        - Books
      responses:
        201:
          description: Book has been ordered
          schema:
            $ref: '#/definitions/order'
        400:
          description: Invalid Order
  /books/payment:
    post:
      description: place a payment for a book
      parameters:
        - name: orderId
          description: order id to be done
          in: query
          required: true
          type: integer
          format: int64
        - name: userId
          description: user who pays the order
          in: query
          required: true
          type: integer
          format: int64
        - name: amount
          description: order id to bedone
          in: query
          required: true
          type: number
          format: float
      tags:
        - Books
      responses:
        201:
          description: The payment succesfully done
          schema:
            $ref: '#/definitions/payment'
        404:
          description:  The payment has not done
  /books/list: 
    post:
      description: Place a book to the "want to read" list
      parameters:
        - name: userId
          description: user who pays the order
          in: query
          required: true
          type: integer
          format: int64
        - name: bookId
          description: book id 
          in: query
          required: true
          type: integer
          format: int64
      tags:
        - Books
      responses:
        201:
          description: Book has been added to the list
          schema:
            $ref: '#/definitions/list'
  /books/critic: 
    post:
      description: Write a critic for a book
      parameters:
        - name: userId
          description: user who pays the order
          in: query
          required: true
          type: integer
          format: int64
        - name: bookId
          description: book id 
          in: query
          required: true
          type: integer
          format: int64
        - name: critic
          description: critic for the book 
          in: query
          required: true
          type: string
      tags:
        - Books
      responses:
        201:
          description: Critic has been done
          schema:
            $ref: '#/definitions/critic'
  /books/rating: 
    post:
      description: Add a rating for a book
      parameters:
        - name: userId
          description: user who pays the order
          in: query
          required: true
          type: integer
          format: int64
        - name: bookId
          description: book id 
          in: query
          required: true
          type: integer
          format: int64
        - name: rating
          description: rating for the book 
          in: query
          required: true
          type: number
          format: float
      tags:
        - Books
      responses:
        200:
          description: Rating has been done
          schema:
            $ref: '#/definitions/rating'
